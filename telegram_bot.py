import json
import os
import re
from datetime import datetime, timedelta
from typing import Set, Dict
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.constants import ParseMode

from sentiment_analyzer import SentimentAnalyzer
from report_generator import ReportGenerator
from telegram_client import TelegramNewsClient
from config import Config
from logging_config import LoggingConfig

logger = LoggingConfig.setup_bot_logging()

def clean_text_preview(text: str, max_length: int = 200) -> str:
    """–û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —É–¥–∞–ª—è—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É—è –ø—Ä–æ–±–µ–ª—ã"""
    if not text:
        return ""
    
    clean_text = text.replace('\n', ' ').replace('\r', ' ').strip()
    clean_text = re.sub(r'\s+', ' ', clean_text)
    return clean_text[:max_length] + '...' if len(clean_text) > max_length else clean_text


class NegativePostsBot:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.app = Application.builder().token(bot_token).build()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.sentiment_analyzer = SentimentAnalyzer()
        self.report_generator = ReportGenerator()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_active = False
        self.sent_message_ids: Set[int] = set()
        self.monitoring_chat_id = None
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å HTML
        self.last_html_path = None
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.selected_channels = Config.get_channels_list()  # Default to all configured channels
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        self.recent_callbacks: Dict[str, float] = {}
        self.recent_commands: Dict[str, float] = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._load_sent_messages()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –æ–±—Ä–∞—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("analyze", self.analyze_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
    
    def _load_sent_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists('sent_messages.json'):
                with open('sent_messages.json', 'r') as f:
                    data = json.load(f)
                    self.sent_message_ids = set(data.get('sent_ids', []))
                    logger.info(f"Loaded {len(self.sent_message_ids)} sent message IDs")
        except Exception as e:
            logger.error(f"Error loading sent messages: {e}")
            self.sent_message_ids = set()
    
    def _save_sent_messages(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        try:
            data = {
                'sent_ids': list(self.sent_message_ids),
                'last_updated': datetime.now().isoformat()
            }
            with open('sent_messages.json', 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving sent messages: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /start
        if self._is_duplicate_command(chat_id, "start"):
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="analyze_now")],
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data="select_channels")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="start_monitor")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        channels_list = Config.get_channels_list()
        channels_text = ", ".join(channels_list)
        
        welcome_text = """
ü§ñ **–ë–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤**

üìã –ö–∞–Ω–∞–ª—ã: `{}`
üéØ –ü–æ—Ä–æ–≥ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}%

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
üìä **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å** - –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
üìã **–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª—ã** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üîÑ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """.format(channels_text, Config.NEGATIVE_COMMENT_THRESHOLD * 100)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    def _get_help_text(self) -> str:
        """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏ –±–æ—Ç–∞"""
        return """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/help - —Å–ø—Ä–∞–≤–∫–∞ –±–æ—Ç–∞
/analyze - –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
/status - —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

**–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**

üìä **–ê–Ω–∞–ª–∏–∑**
- –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞:
‚Ä¢ üìÖ –°–µ–≥–æ–¥–Ω—è
‚Ä¢ üìÜ –í—á–µ—Ä–∞  
‚Ä¢ üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
‚Ä¢ üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
‚Ä¢ üîß –í—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥

- –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
- –ø–æ–∏—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

üîÑ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**  
- –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
- –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
- –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥–æ–π /stop

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
- –ö–∞–Ω–∞–ª—ã: `{channel}`
- –ü–æ—Ä–æ–≥ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏: {threshold}%
        """.format(
            channel=Config.get_channels_list(),
            threshold=Config.NEGATIVE_COMMENT_THRESHOLD * 100
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /help
        if self._is_duplicate_command(chat_id, "help"):
            return
            
        await update.message.reply_text(self._get_help_text(), parse_mode=ParseMode.MARKDOWN)
    
    async def analyze_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /analyze
        if self._is_duplicate_command(chat_id, "analyze"):
            return
            
        await self._show_date_selection_menu(chat_id, context)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        chat_id = update.effective_chat.id
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã /status
        if self._is_duplicate_command(chat_id, "status"):
            return
            
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**
‚Ä¢ –ü–æ—Ä–æ–≥ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏: {Config.NEGATIVE_COMMENT_THRESHOLD * 100}%

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üîÑ –ê–∫—Ç–∏–≤–µ–Ω' if self.monitoring_active else '‚èπÔ∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.sent_message_ids)}
        """
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.MARKDOWN)
    
    def _is_duplicate_callback(self, callback_key: str, timeout: float = 3.0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–µ–¥–∞–≤–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        current_time = time.time()
        
        if callback_key in self.recent_callbacks:
            time_diff = current_time - self.recent_callbacks[callback_key]
            if time_diff < timeout:
                logger.info(f"Ignoring duplicate callback '{callback_key}' (sent {time_diff:.1f}s ago)")
                return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.recent_callbacks[callback_key] = current_time
        self.recent_callbacks = {
            key: timestamp for key, timestamp in self.recent_callbacks.items()
            if current_time - timestamp < 10.0
        }
        return False

    def _is_duplicate_command(self, chat_id: int, command: str, timeout: float = 2.0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        current_time = time.time()
        command_key = f"{chat_id}_{command}"
        
        if command_key in self.recent_commands:
            time_diff = current_time - self.recent_commands[command_key]
            if time_diff < timeout:
                logger.info(f"Ignoring duplicate command '{command}' from {chat_id} (sent {time_diff:.1f}s ago)")
                return True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        self.recent_commands[command_key] = current_time
        self.recent_commands = {
            key: timestamp for key, timestamp in self.recent_commands.items()
            if current_time - timestamp < 10.0
        }
        return False

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º–∞—É—Ç–∞
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"Failed to answer callback query (query may be too old): {e}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        chat_id = query.message.chat_id
        callback_key = f"{chat_id}_{query.data}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        if self._is_duplicate_callback(callback_key):
            return
        
        if query.data == "analyze_now":
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
            await self._show_date_selection_menu(query.message.chat_id, context)
        
        elif query.data == "select_channels":
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤
            await self._show_channels_selection_menu(query.message.chat_id, context)
        
        elif query.data.startswith("toggle_channel_"):
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
            channel = query.data.replace("toggle_channel_", "")
            await self._toggle_channel_selection(channel, query.message.chat_id, context)
        
        elif query.data == "channels_done":
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
            await self._finish_channel_selection(query.message.chat_id, context)
        
        elif query.data == "help":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=self._get_help_text(),
                parse_mode=ParseMode.MARKDOWN
            )
            
        elif query.data == "get_html_report":
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—É—Ç—å HTML-—Ñ–∞–π–ª–∞
                if hasattr(self, 'last_html_path') and self.last_html_path:
                    html_path = self.last_html_path
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML-—Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                    with open(html_path, 'rb') as f:
                        await context.bot.send_document(
                            chat_id=query.message.chat_id,
                            document=f,
                            filename=os.path.basename(html_path),
                            caption="üìä –°–∫–∞—á–∞–π—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ"
                        )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text="‚ùå HTML-–æ—Ç—á–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑"
                    )
                
            except Exception as e:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML-—Ñ–∞–π–ª–∞: {str(e)}"
                )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        elif query.data.startswith("analyze_"):
            date_option = query.data.replace("analyze_", "")
            await self._handle_date_selection(query.message.chat_id, context, date_option)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
        elif query.data.startswith("cal_"):
            await self._handle_calendar_callback(query, context)
    
    async def _show_date_selection_menu(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å –±—ã—Å—Ç—Ä—ã–º–∏ –æ–ø—Ü–∏—è–º–∏"""
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="analyze_today")],
            [InlineKeyboardButton("üìÜ –í—á–µ—Ä–∞", callback_data="analyze_yesterday")],
            [InlineKeyboardButton("üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", callback_data="analyze_week")],
            [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π", callback_data="analyze_month")],
            [InlineKeyboardButton("üîß –í—ã–±—Ä–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data="analyze_custom")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìä **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _handle_date_selection(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE, date_option: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        from datetime import datetime, timedelta
        
        now = datetime.now()
        
        if date_option == "today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = now
            period_name = "—Å–µ–≥–æ–¥–Ω—è"
            
        elif date_option == "yesterday":
            yesterday = now - timedelta(days=1)
            start_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
            period_name = "–≤—á–µ—Ä–∞"
            
        elif date_option == "week":
            start_date = now - timedelta(days=7)
            end_date = now
            period_name = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
            
        elif date_option == "month":
            start_date = now - timedelta(days=30)
            end_date = now
            period_name = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            
        elif date_option == "custom":
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            await self._show_custom_date_selection(chat_id, context)
            return
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            return
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º –¥–∞—Ç
        await self._run_analysis_with_dates(chat_id, context, start_date, end_date, period_name)
    
    async def _show_custom_date_selection(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not hasattr(self, 'date_selection_state'):
            self.date_selection_state = {}
        
        self.date_selection_state[chat_id] = {
            'stage': 'start_date',
            'start_date': None,
            'end_date': None,
            'current_month': datetime.now().replace(day=1),
        }
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥**",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
        await self._show_calendar(chat_id, context, self.date_selection_state[chat_id]['current_month'])
    
    def _create_calendar_keyboard(self, year: int, month: int) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        import calendar
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
        cal = calendar.monthcalendar(year, month)
        
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        
        keyboard = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º/–≥–æ–¥–æ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
        keyboard.append([
            InlineKeyboardButton("‚óÄ", callback_data=f"cal_prev_{year}_{month}"),
            InlineKeyboardButton(f"{month_names[month-1]} {year}", callback_data="cal_ignore"),
            InlineKeyboardButton("‚ñ∂", callback_data=f"cal_next_{year}_{month}")
        ])
        
        days_header = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        keyboard.append([InlineKeyboardButton(day, callback_data="cal_ignore") for day in days_header])
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        for week in cal:
            row = []
            for day in week:
                if day == 0:
                    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                    row.append(InlineKeyboardButton(" ", callback_data="cal_ignore"))
                else:
                    # –ö–Ω–æ–ø–∫–∞ –¥–∞—Ç—ã
                    today = datetime.now()
                    button_date = datetime(year, month, day)
                    
                    # –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
                    if button_date > today:
                        row.append(InlineKeyboardButton(" ", callback_data="cal_ignore"))
                    else:
                        row.append(InlineKeyboardButton(str(day), callback_data=f"cal_date_{year}_{month}_{day}"))
            keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cal_cancel")])
        
        return InlineKeyboardMarkup(keyboard)
    
    async def _show_calendar(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE, date: datetime):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
        keyboard = self._create_calendar_keyboard(date.year, date.month)
        
        state = self.date_selection_state.get(chat_id, {})
        stage = state.get('stage', 'start_date')
        
        if stage == 'start_date':
            text = "üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:**"
        else:
            start_date = state.get('start_date')
            text = f"üìÖ **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É:**\n\n" \
                   f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: {start_date.strftime('%d.%m.%Y')}"
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _handle_calendar_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        chat_id = query.message.chat_id
        data = query.data
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not hasattr(self, 'date_selection_state'):
            self.date_selection_state = {}
        
        if chat_id not in self.date_selection_state:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ"
            )
            return
        
        state = self.date_selection_state[chat_id]
        
        if data == "cal_cancel":
            # –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            del self.date_selection_state[chat_id]
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω"
            )
            return
        
        elif data == "cal_ignore":
            # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            return
        
        elif data.startswith("cal_prev_") or data.startswith("cal_next_"):
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
            parts = data.split("_")
            current_year = int(parts[2])
            current_month = int(parts[3])
            
            if data.startswith("cal_prev_"):
                # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
                if current_month == 1:
                    new_month = 12
                    new_year = current_year - 1
                else:
                    new_month = current_month - 1
                    new_year = current_year
            else:
                # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
                if current_month == 12:
                    new_month = 1
                    new_year = current_year + 1
                else:
                    new_month = current_month + 1
                    new_year = current_year
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            state['current_month'] = datetime(new_year, new_month, 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
            keyboard = self._create_calendar_keyboard(new_year, new_month)
            await context.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=query.message.message_id,
                reply_markup=keyboard
            )
        
        elif data.startswith("cal_date_"):
            # –î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞
            parts = data.split("_")
            selected_year = int(parts[2])
            selected_month = int(parts[3])
            selected_day = int(parts[4])
            
            selected_date = datetime(selected_year, selected_month, selected_day)
            
            if state['stage'] == 'start_date':
                # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
                state['start_date'] = selected_date
                state['stage'] = 'end_date'
                
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=query.message.message_id,
                    text=f"–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
                await self._show_calendar(chat_id, context, state['current_month'])
                
            elif state['stage'] == 'end_date':
                # –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞, –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                state['end_date'] = selected_date
                
                start_date = state['start_date']
                end_date = state['end_date']
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—ã
                if end_date < start_date:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="‚ùå –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–π",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    await self._show_calendar(chat_id, context, state['current_month'])
                    return
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del self.date_selection_state[chat_id]
                
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ **–ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω:**\n\n"
                         f"üìÖ –°: {start_date.strftime('%d.%m.%Y')}\n"
                         f"üìÖ –ü–æ: {end_date.strftime('%d.%m.%Y')}\n\n"
                         f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑...",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
                days_diff = (end_date - start_date).days + 1
                if days_diff == 1:
                    period_name = f"{start_date.strftime('%d.%m.%Y')}"
                else:
                    period_name = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                await self._run_analysis_with_dates(chat_id, context, start_date, end_date, period_name)
    
    async def _run_analysis_with_dates(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE, 
                                     start_date: datetime, end_date: datetime, period_name: str):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç"""
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_key = f"analysis_{chat_id}"
        if self._is_duplicate_callback(analysis_key, timeout=30.0):  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            logger.info(f"Analysis already running for chat {chat_id}, ignoring duplicate request")
            return
            
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            progress_msg = await context.bot.send_message(
                chat_id=chat_id,
                text=f"üîÑ **–ê–Ω–∞–ª–∏–∑ –∑–∞ {period_name}...**",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            async with TelegramNewsClient() as client:
                await client.connect(self.selected_channels)
                messages_by_channel = await client.get_recent_messages_from_all_channels(
                    limit=Config.MAX_MESSAGES,
                    days_back=(end_date - start_date).days + 1
                )
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            all_messages = []
            cutoff_start = start_date.replace(tzinfo=None)
            cutoff_end = end_date.replace(tzinfo=None)
            
            for channel_username, messages in messages_by_channel.items():
                filtered_messages = []
                for msg in messages:
                    msg_date = msg['date'].replace(tzinfo=None) if msg['date'].tzinfo else msg['date']
                    if cutoff_start <= msg_date <= cutoff_end:
                        filtered_messages.append(msg)
                
                messages_by_channel[channel_username] = filtered_messages
                all_messages.extend(filtered_messages)
            
            if not all_messages:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=progress_msg.message_id,
                    text="‚ÑπÔ∏è **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"
                         "üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}\n"
                         "üì• –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.".format(start_date.strftime('%d.%m.%Y'), end_date.strftime('%d.%m.%Y')),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channels_info = []
            for channel, msgs in messages_by_channel.items():
                channels_info.append("{}: {}".format(channel, len(msgs)))
            
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=progress_msg.message_id,
                text="üîÑ **–ê–Ω–∞–ª–∏–∑ –∑–∞ {}...**\n\n"
                     "üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}\n"
                     "üì• –ü–æ–ª—É—á–µ–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                     "üìã –ü–æ –∫–∞–Ω–∞–ª–∞–º: {}\n"
                     "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç...".format(
                         period_name,
                         start_date.strftime('%d.%m.%Y'),
                         end_date.strftime('%d.%m.%Y'),
                         len(all_messages),
                         ", ".join(channels_info)
                     ),
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            all_messages = self.sentiment_analyzer.analyze_messages_sentiment(all_messages)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=progress_msg.message_id,
                text="üîÑ **–ê–Ω–∞–ª–∏–∑ –∑–∞ {}...**\n\n"
                     "üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}\n"
                     "üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                     "üìã –ü–æ –∫–∞–Ω–∞–ª–∞–º: {}\n"
                     "üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...".format(
                         period_name,
                         start_date.strftime('%d.%m.%Y'),
                         end_date.strftime('%d.%m.%Y'),
                         len(all_messages),
                         ", ".join(channels_info)
                     ),
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report_result = self.report_generator.generate_multichannel_negative_posts_report(all_messages)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∞–ª–∏–∑
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=progress_msg.message_id,
                text="‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}!**\n\n"
                     "üìÖ –ü–µ—Ä–∏–æ–¥: {} - {}\n"
                     "üì• –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                     "üìã –ü–æ –∫–∞–Ω–∞–ª–∞–º: {}\n"
                     "‚ö†Ô∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {}\n"
                     "üìä –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏: {:.1f}%".format(
                         period_name,
                         start_date.strftime('%d.%m.%Y'),
                         end_date.strftime('%d.%m.%Y'),
                         report_result['total_messages'],
                         ", ".join(channels_info),
                         report_result['total_negative'],
                         (report_result['total_negative'] / report_result['total_messages'] * 100) if report_result['total_messages'] > 0 else 0
                     ),
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å HTML-—Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.last_html_path = report_result.get('html_file', report_result.get('html_path'))
            
            keyboard = [[InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å HTML-–æ—Ç—á–µ—Ç", callback_data="get_html_report")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
            channels_summary = []
            for channel, data in report_result['channels_data'].items():
                ch_total = len(data['messages'])
                ch_negative = len(data['negative_posts'])
                ch_pct = (ch_negative / ch_total * 100) if ch_total > 0 else 0
                channels_summary.append("‚Ä¢ {}: {} —Å–æ–æ–±—â–µ–Ω–∏–π, {} –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö ({:.1f}%)".format(
                    data['channel_title'], ch_total, ch_negative, ch_pct
                ))
            
            summary_text = """
üìã **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞–Ω–∞–ª–∞–º:**

{}""".format(
                "\n".join(channels_summary),
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É —Å –∫–Ω–æ–ø–∫–æ–π HTML
            await context.bot.send_message(
                chat_id=chat_id,
                text=summary_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            json_file_path = report_result.get('json_file', report_result.get('json_path'))
            if json_file_path:
                await self._send_formatted_json_data(chat_id, json_file_path)
            
        except Exception as e:
            logger.error(f"Analysis error: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå **–ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è:** {str(e)}",
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _send_long_message(self, chat_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —Å–æ–±–ª—é—Å—Ç–∏ –ª–∏–º–∏—Ç –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤ Telegram"""
        MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—É—Ñ–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        if len(message) <= MAX_MESSAGE_LENGTH:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –∫—É—Å–æ–∫
            await self.app.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        else:
            # –ù—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            chunks = []
            lines = message.split('\n')
            current_chunk = ""
            
            for line in lines:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ª–∏–º–∏—Ç
                if len(current_chunk) + len(line) + 1 > MAX_MESSAGE_LENGTH:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Å–æ–∫ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                    if current_chunk:
                        chunks.append(current_chunk.strip())
                    current_chunk = line
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—É—â–∏–π –∫—É—Å–æ–∫
                    if current_chunk:
                        current_chunk += "\n" + line
                    else:
                        current_chunk = line
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
            if current_chunk:
                chunks.append(current_chunk.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫—É—Å–∫–∏
            for i, chunk in enumerate(chunks):
                if i == 0:
                    # –ü–µ—Ä–≤—ã–π –∫—É—Å–æ–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    await self.app.bot.send_message(
                        chat_id=chat_id,
                        text=chunk,
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )
                else:
                    # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –∫—É—Å–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    await self.app.bot.send_message(
                        chat_id=chat_id,
                        text=f"üìÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...\n\n{chunk}",
                        parse_mode=ParseMode.MARKDOWN,
                        disable_web_page_preview=True
                    )

    async def _send_formatted_json_data(self, chat_id: int, json_path: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JSON –∫–∞–∫ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ JSON
            with open(json_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –∏ –º–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö
            if 'channels' in data:  # Multi-channel format
                metadata = data.get('metadata', {})
                channels_data = data.get('channels', {})
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                complete_message = "üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                complete_message += "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n"
                complete_message += "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {}\n".format(metadata.get('total_messages', 0))
                complete_message += "‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {}\n".format(metadata.get('total_negative', 0))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                total_negative_posts = sum(len(channel_data.get('negative_posts', [])) for channel_data in channels_data.values())
                if total_negative_posts > 0:
                    complete_message += "\n\n–¢–æ–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n"
                    
                    for channel, channel_data in channels_data.items():
                        negative_posts = channel_data.get('negative_posts', [])
                        if not negative_posts:
                            continue
                            
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–Ω–∞–ª–∞
                        complete_message += f"\n‚Ä¢ –ö–∞–Ω–∞–ª: {channel_data.get('channel_title', channel)}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                        for post_idx, post in enumerate(negative_posts, 1):
                            # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞
                            text_preview = clean_text_preview(post.get('text', ''), 100)  # –ö–æ—Ä–æ—á–µ –¥–ª—è —Å–æ–≤–º–µ—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            
                            post_id = post.get('id', 'N/A')
                            post_date = post.get('date', 'N/A')
                            negative_score = post.get('negative_score', 0)
                            total_comments = post.get('total_comments', 0)
                            negative_comments = post.get('negative_comments', 0)
                            negative_comment_percentage = post.get('negative_comment_percentage', 0)
                            views = post.get('views', 0)
                            forwards = post.get('forwards', 0)
                            
                            # –°–æ–∑–¥–∞–µ–º Telegram-—Å—Å—ã–ª–∫—É - –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º generic
                            channel_username = post.get('channel', channel)
                            if channel_username.startswith('@'):
                                channel_username = channel_username[1:]
                            
                            post_link = f"https://t.me/{channel_username}/{post_id}" if channel_username else "#"
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Å—Ç–∏–ª–µ —Å Telegram-—Å—Å—ã–ª–∫–æ–π
                            complete_message += f"""
{post_idx}. –ü–æ—Å—Ç ID {post_id}
üìÖ {post_date}
üìä –û—Ü–µ–Ω–∫–∞: {negative_score:.3f}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {negative_comments}/{total_comments} ({negative_comment_percentage:.1f}% –Ω–µ–≥.)
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} | ‚ÜóÔ∏è –ü–µ—Ä–µ–ø–æ—Å—Ç—ã: {forwards}

üìÑ {text_preview}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram]({post_link})
"""
                else:
                    complete_message += "\n\nüéâ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–¥–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ
                await self._send_long_message(chat_id, complete_message)
                
                return  # –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω—å—à–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            else:  # –§–æ—Ä–º–∞—Ç –æ–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                metadata = data.get('metadata', {})
                negative_posts = data.get('negative_posts', [])
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                complete_message = "üìä –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞\n\n"
                complete_message += "–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n"
                complete_message += "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {}\n".format(metadata.get('total_posts_analyzed', 0))
                complete_message += "‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {}\n".format(metadata.get('negative_posts_found', 0))
                complete_message += "‚Ä¢ –ö–∞–Ω–∞–ª: {}\n".format(metadata.get('channel_username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
                if negative_posts:
                    complete_message += "\n\n–¢–æ–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:\n"
                    
                    for i, post in enumerate(negative_posts[:3], 1):
                        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞
                        text_preview = clean_text_preview(post.get('text', ''), 100)  # –ö–æ—Ä–æ—á–µ –¥–ª—è —Å–æ–≤–º–µ—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
                        post_id = post.get('id', 'N/A')
                        post_date = post.get('date', 'N/A')
                        negative_score = post.get('negative_score', 0)
                        total_comments = post.get('total_comments', 0)
                        negative_comments = post.get('negative_comments', 0)
                        negative_comment_percentage = post.get('negative_comment_percentage', 0)
                        views = post.get('views', 0)
                        forwards = post.get('forwards', 0)
                        
                        # –°–æ–∑–¥–∞–µ–º Telegram-—Å—Å—ã–ª–∫—É
                        channel_username = metadata.get('channel_username', '')
                        if channel_username.startswith('@'):
                            channel_username = channel_username[1:]
                        
                        post_link = f"https://t.me/{channel_username}/{post_id}" if channel_username else "#"
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Å—Ç–∏–ª–µ —Å Telegram-—Å—Å—ã–ª–∫–æ–π
                        complete_message += f"""
{i}. –ü–æ—Å—Ç ID {post_id}
üìÖ {post_date}
üìä –û—Ü–µ–Ω–∫–∞: {negative_score:.3f}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {negative_comments}/{total_comments} ({negative_comment_percentage:.1f}% –Ω–µ–≥.)
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views} | ‚ÜóÔ∏è –ü–µ—Ä–µ–ø–æ—Å—Ç—ã: {forwards}

üìÑ {text_preview}

üîó [–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram]({post_link})
"""
                else:
                    complete_message += "\n\nüéâ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–¥–Ω–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ
                await self._send_long_message(chat_id, complete_message)
                
                return  # –í—ã—Ö–æ–¥–∏–º —Ä–∞–Ω—å—à–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        except Exception as e:
            logger.error(f"Error sending formatted JSON: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON-—Ñ–∞–π–ª
            with open(json_path, 'rb') as f:
                await self.app.bot.send_document(
                    chat_id=chat_id,
                    document=f,
                    filename=os.path.basename(json_path),
                    caption="üìÑ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ (–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
                )
    
    async def _show_channels_selection_menu(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        available_channels = Config.get_channels_list()
        
        if not available_channels:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."
            )
            return
        
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel in available_channels:
            is_selected = channel in self.selected_channels
            status_icon = "‚úÖ" if is_selected else "‚òê"
            button_text = "{} {}".format(status_icon, channel)
            keyboard.append([InlineKeyboardButton(button_text, callback_data="toggle_channel_{}".format(channel))])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="channels_done")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        selected_text = ", ".join(self.selected_channels) if self.selected_channels else "–Ω–µ—Ç"
        
        text = """
üìã **–í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞**

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: `{}`

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –µ–≥–æ:
        """.format(selected_text)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def _toggle_channel_selection(self, channel: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞"""
        if channel in self.selected_channels:
            self.selected_channels.remove(channel)
        else:
            self.selected_channels.append(channel)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≤—ã–±–æ—Ä–æ–º
        await self._show_channels_selection_menu(chat_id, context)
    
    async def _finish_channel_selection(self, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞"""
        if not self.selected_channels:
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
            return
        
        selected_text = ", ".join(self.selected_channels)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚úÖ **–ö–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: `{}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑.".format(selected_text),
            parse_mode=ParseMode.MARKDOWN
        )
    
    def run(self):
        logger.info("Negative posts analysis")
        self.app.run_polling()
