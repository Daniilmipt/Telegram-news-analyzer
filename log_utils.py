import os
import sys
import glob
from datetime import datetime
from logging_config import LoggingConfig


def show_log_status():
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ª–æ–≥–æ–≤"""
    print("üìä –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")
    print("=" * 50)
    
    info = LoggingConfig.get_log_files_info()
    
    for log_name, details in info.items():
        print("\nüìù {}:".format(log_name.replace('_', ' ').title()))
        print("   –ü—É—Ç—å: {}".format(details['path']))
        print("   –†–∞–∑–º–µ—Ä: {} MB".format(details['size_mb']))
        print("   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {}".format(details['modified']))
    
    print("\nüìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {}".format(LoggingConfig.LOG_DIR))
    print("   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}".format(os.path.exists(LoggingConfig.LOG_DIR)))
    
    if os.path.exists(LoggingConfig.LOG_DIR):
        log_files = glob.glob(os.path.join(LoggingConfig.LOG_DIR, "*.log*"))
        print("   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–∞: {}".format(len(log_files)))
        
        total_size = sum(os.path.getsize(f) for f in log_files if os.path.isfile(f))
        print("   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {:.2f} MB".format(total_size / (1024*1024)))


def tail_log(lines=20):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞"""
    log_file = LoggingConfig.LOG_FILE
    
    if not os.path.exists(log_file):
        print("‚ùå –§–∞–π–ª –ª–æ–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {}".format(log_file))
        return
    
    print("üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {} —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞:".format(lines))
    print("=" * 60)
    
    try:
        with open(log_file, 'r') as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:] if len(all_lines) > lines else all_lines
            
            for line in last_lines:
                print(line.rstrip())
                
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞: {}".format(e))


def clear_logs():
    """–û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞"""
    log_file = LoggingConfig.LOG_FILE
    
    cleared_count = 0
    
    if os.path.exists(log_file):
        try:
            os.remove(log_file)
            print("‚úÖ –û—á–∏—â–µ–Ω–æ: {}".format(os.path.basename(log_file)))
            cleared_count += 1
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {}: {}".format(os.path.basename(log_file), e))
    
    # Clear rotated log files
    if os.path.exists(LoggingConfig.LOG_DIR):
        rotated_files = glob.glob(os.path.join(LoggingConfig.LOG_DIR, "*.log.*"))
        for rot_file in rotated_files:
            try:
                os.remove(rot_file)
                print("‚úÖ –û—á–∏—â–µ–Ω–æ: {}".format(os.path.basename(rot_file)))
                cleared_count += 1
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {}: {}".format(os.path.basename(rot_file), e))
    
    print("\nüìä –í—Å–µ–≥–æ –æ—á–∏—â–µ–Ω–æ: {}".format(cleared_count))


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if len(sys.argv) < 2:
        print("üìù News Analyzer - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏")
        print("\n–ö–æ–º–∞–Ω–¥—ã:")
        print("  python log_utils.py status         - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–∞ –ª–æ–≥–∞")
        print("  python log_utils.py tail N   - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞")
        print("  python log_utils.py clear          - –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞")
        print("\n–ü—Ä–∏–º–µ—Ä: python log_utils.py tail 50")
        return
    
    command = sys.argv[1].lower()
    
    if command == "status":
        show_log_status()
        
    elif command == "tail":
        lines = int(sys.argv[2]) if len(sys.argv) > 2 else 20
        tail_log(lines)
        
    elif command == "clear":
        confirm = input("‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞? (y/N): ")
        if confirm.lower() == 'y':
            clear_logs()
        else:
            print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}".format(command))


if __name__ == "__main__":
    main()
